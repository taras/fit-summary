#!/usr/bin/env node
'use strict';

const program = require('commander');
const path = require('path');
const fs = require('fs');
const builder = require('../lib/index');

program
  .arguments('[dirs...]')
  .option('-e, --elements <el>', `elements to extract from fit data`, val => val.split(','))
  .option('-o, --output <outputDir>', `directory where the generated files be written`)
  .option('-n, --extension <extNumber>', `number of file extension where fit is found`)
  .parse(process.argv);

let dirs = program.args;
let elements = program.elements || [];
let extNumber = program['extension'] || 3;

let defaultOutputDir = ['results'].concat(elements).join('-');
let outputDir = program.output || path.join(process.cwd(), defaultOutputDir);
let extension = `${extNumber}.fit`;

if (dirs.length < 1) {
  console.error(`
  üí©  You didn't specify a directory to read data from.
  
  ‚ùï  fit-summary --elements=Au,La my-data
  `);
  process.exit(1);
}

dirs = dirs
        .map(dir => path.join(process.cwd(), dir) )
        .map(dir => dir.replace(/\/$/, ""));

dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    console.error(`
      üí©  Your specified a data directory that doesn't exist.     
      
      ‚ö†Ô∏è  ${dir}
    `);
    process.exit(1);
  }
});

if (elements.length < 1) {
  console.error(`
  üí©  You didn't specify what elements to extract.
  
  ‚ùï  fit-summary --elements=Au,La my-data
  `);  
  process.exit(1);
}

try {
  elements = elements.map(element => require(`../lib/elements/${element.toLowerCase()}`));
} catch (e) {
  console.error(`
    üí©  Error occured while attempt to import an element.  
    
    ‚ö†Ô∏è  ${e.message}
  `);
  process.exit(1);
}

if (fs.existsSync(outputDir)) {
  console.error(`
    üí©  Output directory already exists.
    
    ‚ùï  You can remove ${outputDir}
    ‚ùï  You can use use --output= option to specify output directory.
  `);  
  process.exit(1);
}

console.info(`
      üë∑  Building fit summary:
          - files: ${dirs.map(dir => `${dir}/*.${extension}`).join("\n    ")}
          - elements: ${elements.map(el => el.name).join(', ')}
`);

builder.build({
  elements,
  dirs,
  outputDir,
  extension
}).then(() => {
    console.info(`
      üòä  Build was successful!

      üòò  Files written to ${outputDir}
    `);
  })
  .then(function () {
    process.exit(0)
  })
  .catch(function (err) {
    // Should show file and line/col if present
    if (err.file) {
      console.error('File: ' + err.file);
    }
    console.error(`
      ‚ùå  Build failed
    `);
    if (err.message.indexOf('Concat: nothing matched [**/*.txt]') !== -1) {
      console.error(`
      üò´  Could not find files matching: ${dirs.map(dir => `${dir}/*.${extension}`).join("\n    ")}
          
      ‚ùï  Try using --extension=2
      `);
    } else {
      console.error(err.stack);
    }
    process.exit(1)
  });